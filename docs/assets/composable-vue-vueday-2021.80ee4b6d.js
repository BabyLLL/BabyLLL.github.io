import{_ as n}from"./Slidev.8333e34a.js";import{o as s,c as a,a as t,m as e,n as o,h as c,i as l,G as p,b as u,H as r,e as i,t as k,j as d,f as h}from"./vendor.71f779ca.js";import{i as f}from"./app.ca842b37.js";import{_ as m}from"./Post.vue_vue&type=script&setup=true&lang.bcbdb260.js";const g={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",width:"1.2em",height:"1.2em",preserveAspectRatio:"xMidYMid meet",viewBox:"0 0 32 32"},y=[t("path",{d:"M16 2a14 14 0 0 0-4.43 27.28c.7.13 1-.3 1-.67v-2.38c-3.89.84-4.71-1.88-4.71-1.88a3.71 3.71 0 0 0-1.62-2.05c-1.27-.86.1-.85.1-.85a2.94 2.94 0 0 1 2.14 1.45a3 3 0 0 0 4.08 1.16a2.93 2.93 0 0 1 .88-1.87c-3.1-.36-6.37-1.56-6.37-6.92a5.4 5.4 0 0 1 1.44-3.76a5 5 0 0 1 .14-3.7s1.17-.38 3.85 1.43a13.3 13.3 0 0 1 7 0c2.67-1.81 3.84-1.43 3.84-1.43a5 5 0 0 1 .14 3.7a5.4 5.4 0 0 1 1.44 3.76c0 5.38-3.27 6.56-6.39 6.91a3.33 3.33 0 0 1 .95 2.59v3.84c0 .46.25.81 1 .67A14 14 0 0 0 16 2z","fill-rule":"evenodd",fill:"currentColor"},null,-1)];var w={name:"carbon-logo-github",render:function(n,t){return s(),a("svg",g,y)}};const b={},v={class:"bg-$prism-background px-2 py-1 rounded font-mono inline-block text-0.6em transform translate-y-[-1em] translate-x-[-0.3em]"};b.render=function(n,t){return s(),a("span",v,[e(n.$slots,"default")])};const x={},I=l("Core");x.render=function(n,a){const t=b;return s(),o(t,{class:"text-green-500"},{default:c((()=>[I])),_:1})};const T={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",width:"1.2em",height:"1.2em",preserveAspectRatio:"xMidYMid meet",viewBox:"0 0 32 32"},V=[t("path",{d:"M13.502 5.414a15.075 15.075 0 0 0 11.594 18.194a11.113 11.113 0 0 1-7.975 3.39c-.138 0-.278.005-.418 0a11.094 11.094 0 0 1-3.2-21.584M14.98 3a1.002 1.002 0 0 0-.175.016a13.096 13.096 0 0 0 1.825 25.981c.164.006.328 0 .49 0a13.072 13.072 0 0 0 10.703-5.555a1.01 1.01 0 0 0-.783-1.565A13.08 13.08 0 0 1 15.89 4.38A1.015 1.015 0 0 0 14.98 3z",fill:"currentColor"},null,-1)];var S={name:"carbon-moon",render:function(n,t){return s(),a("svg",T,V)}};const A={xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",width:"1.2em",height:"1.2em",preserveAspectRatio:"xMidYMid meet",viewBox:"0 0 32 32"},R=[p('<path d="M16 12.005a4 4 0 1 1-4 4a4.005 4.005 0 0 1 4-4m0-2a6 6 0 1 0 6 6a6 6 0 0 0-6-6z" fill="currentColor"></path><path d="M5.394 6.813l1.414-1.415l3.506 3.506L8.9 10.318z" fill="currentColor"></path><path d="M2 15.005h5v2H2z" fill="currentColor"></path><path d="M5.394 25.197L8.9 21.691l1.414 1.415l-3.506 3.505z" fill="currentColor"></path><path d="M15 25.005h2v5h-2z" fill="currentColor"></path><path d="M21.687 23.106l1.414-1.415l3.506 3.506l-1.414 1.414z" fill="currentColor"></path><path d="M25 15.005h5v2h-5z" fill="currentColor"></path><path d="M21.687 8.904l3.506-3.506l1.414 1.415l-3.506 3.505z" fill="currentColor"></path><path d="M15 2.005h2v5h-2z" fill="currentColor"></path>',9)];var M={name:"carbon-sun",render:function(n,t){return s(),a("svg",A,R)}};const j={class:"flex"},C={class:"mr-1 ml-2"};var D=u({setup(n){const e=r(f);return(n,c)=>{const l=S,p=M;return s(),a("button",{class:"bg-[#42b883] rounded border-b-2 border-green-900 text-white text-sm px-2 pt-1.5 pb-1 inline-block !outline-none hover:bg-opacity-85",onClick:c[0]||(c[0]=(...n)=>i(e)&&i(e)(...n))},[t("div",j,[i(f)?(s(),o(l,{key:0})):(s(),o(p,{key:1})),t("span",C,k(i(f)?"Dark":"Light"),1)])])}}});const W={class:"px-2 -mx-2 mt-4 py-2 flex"},U=t("img",{src:"https://vueuse.org/favicon.svg",class:"h-1.5rem !my-auto !mr-2 inline-block align-baseline"},null,-1),_=t("span",{class:"opacity-75"},"Avaliable in VueUse: ",-1),P=["href"];var z=u({props:{name:{type:String,required:!0}},setup:n=>(e,o)=>(s(),a("div",W,[U,_,t("a",{class:"ml-2 font-mono opacity-75 hover:opacity-100",href:`https://vueuse.org/${n.name}`},k(n.name),9,P)]))});const H={},L=l("Pattern");H.render=function(n,a){const t=b;return s(),o(t,{class:"text-pink-500"},{default:c((()=>[L])),_:1})};const E={},B=l("Tips");E.render=function(n,a){const t=b;return s(),o(t,{class:"text-orange-400"},{default:c((()=>[B])),_:1})};const q={class:"prose m-auto"},F=t("p",null,[l("This is the transcript of my talk "),t("strong",null,"Composable Vue"),l(" at "),t("a",{href:"https://2021.vueday.it/",target:"_blank",rel:"noopener"},"VueDay 2021")],-1),K=t("p",null,[l("Slides: "),t("a",{href:"https://antfu.me/talks/2021-04-29",target:"_blank",rel:"noopener"},"PDF"),l(" | "),t("a",{href:"https://talks.antfu.me/2021/composable-vue",target:"_blank",rel:"noopener"},"SPA")],-1),Y=t("p",null,[l("Recording: "),t("a",{href:"https://youtu.be/IMJjP6edHd0",target:"_blank",rel:"noopener"},"YouTube")],-1),O=l("Made with "),X=l(),G=t("a",{href:"https://github.com/slidevjs/slidev",target:"_blank",rel:"noopener"},[t("strong",null,"Slidev")],-1),$=l(" - a slides maker for developers that I am working on recently."),N=t("p",null,"My sharing today is Composable Vue, some pattens and tips that might be able to help you writing better composable logic in Vue.",-1),J=t("h2",{id:"vueuse",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#vueuse","aria-hidden":"true"},"#"),l(),t("a",{href:"https://vueuse.org/",target:"_blank",rel:"noopener"},"VueUse")],-1),Z=t("p",null,"It all started with me made this project called VueUse, which is a collection of Vue composable utilities. Initially, I was making this to share some of the functions I wrote with Vue Composition API to be used across apps. Till now, it grows much bigger with the community, we are now an organization on GitHub with 9 team members, 8 add-ons packages for different integrations like motions and document head management. We also have more than 100 functions in the core package that work for both Vue 2 and 3. I have really appreciated all the contributors and the awesome community.",-1),Q=l(),nn=t("a",{href:"https://github.com/vueuse/vueuse",target:"_blank",rel:"noopener"},"vueuse/vueuse",-1),sn=t("p",null,"In today’s talk, I will share with you the patterns and tips that I have learned during developing VueUse and using it to make apps in Composition API.",-1),an=t("h2",{id:"composition-api",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#composition-api","aria-hidden":"true"},"#"),l(" Composition API")],-1),tn=t("p",null,"Let’s have a quick look at the Composition API itself. BTW, please note today’s talk will be a little bit advanced, which I would assume you already have a basic knowledge of what the Vue Composition API is. But don’t worry if you don’t, I believe you will still get some basic images of the methodology and you can also find the slides and transcript on my site after the talk.",-1),en={id:"ref-vs-reactive",tabindex:"-1"},on=t("a",{class:"header-anchor",href:"#ref-vs-reactive","aria-hidden":"true"},"#",-1),cn=l(" Ref vs Reactive "),ln=t("p",null,"Well, let’s start with Ref and Reactive. I bet many of you have wondered the difference between them and which one should you choose.",-1),pn=t("p",null,[l('You can think refs as variables and reactives as objects. When you do the assignment, one is assigning "value" while the other one is assigning properties. While the usage of them can really dependents on what you gonna use them, but if we really need to pick one from them, I’d say go with '),t("code",null,"ref"),l(" whenever you can.")],-1),un=t("p",null,[l("With "),t("code",null,"ref"),l(", you will need to use "),t("code",null,".value"),l(" to access and assigning values, but this also gives you more explicit awareness of when you are tracking and triggering the reactivity system.")],-1),rn=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" ref "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'vue'"),l("\n\n"),t("span",{class:"token keyword"},"let"),l(" foo "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token number"},"0"),l("\n"),t("span",{class:"token keyword"},"let"),l(" bar "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},")"),l("\n\nfoo "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token number"},"1"),l("\nbar "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token number"},"1"),l(),t("span",{class:"token comment"},"// ts-error"),l("\n")])],-1),kn=t("p",null,"As you can see the example here, I actually got an error by accidentally assigning ref with a value, and here I can change the code to fix it.",-1),dn=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" reactive "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'vue'"),l("\n\n"),t("span",{class:"token keyword"},"const"),l(" foo "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token punctuation"},"{"),l(" prop"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token number"},"0"),l(),t("span",{class:"token punctuation"},"}"),l("\n"),t("span",{class:"token keyword"},"const"),l(" bar "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"reactive"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"{"),l(" prop"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token number"},"0"),l(),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),l("\n\nfoo"),t("span",{class:"token punctuation"},"."),l("prop "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token number"},"1"),l("\nbar"),t("span",{class:"token punctuation"},"."),l("prop "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token number"},"1"),l("\n")])],-1),hn=t("p",null,[l("On the other hand, when using "),t("code",null,"reactive"),l(" you actually can’t tell the difference between a plain object and a reactive object without looking for the context, which could sometimes make the debugging a little bit harder.")],-1),fn=t("p",null,[l("Also note in reactive objects, there are several caveats you need to take care about. Like you can’t do object destructure without "),t("code",null,"toRefs"),l(" otherwise they will lose the reactivity. And you will also need to wrap with a function when using with "),t("code",null,"watch"),l(" and so on, where "),t("code",null,"ref"),l(" does not have such limitations.")],-1),mn={id:"ref-auto-unwrapping",tabindex:"-1"},gn=t("a",{class:"header-anchor",href:"#ref-auto-unwrapping","aria-hidden":"true"},"#",-1),yn=l(" Ref Auto Unwrapping "),wn=t("p",null,[l("When using with "),t("code",null,"refs"),l(", a big obstacle that people facing is the annoying "),t("code",null,".value"),l(". But actually, in many cases, you can omit it and make your code looks cleaner.")],-1),bn=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"const"),l(" counter "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},")"),l("\n\n"),t("span",{class:"token function"},"watch"),t("span",{class:"token punctuation"},"("),l("counter"),t("span",{class:"token punctuation"},","),l(" count "),t("span",{class:"token operator"},"=>"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token builtin"},"console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),l("count"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token comment"},"// same as `counter.value`"),l("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),l("\n")])],-1),vn=t("p",null,[l("The "),t("code",null,"watch"),l(" function accepts ref as the watch source directly, and it will return the unwrapped new value of the ref in the callback. So in this case, there is zero "),t("code",null,".value"),l(" needed.")],-1),xn=t("pre",{class:"language-html"},[t("code",{class:"language-html"},[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),l("template")]),t("span",{class:"token punctuation"},">")]),l("\n  "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),l("button")]),l(),t("span",{class:"token attr-name"},"@click"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),l("counter += 1"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),l("\n    Counter is {\\{ counter }}\n  "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),l("button")]),t("span",{class:"token punctuation"},">")]),l("\n"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),l("template")]),t("span",{class:"token punctuation"},">")]),l("\n")])],-1),In=t("p",null,"The other one is the nature of Vue, in the template, all the refs are auto unwrapped, even assignments!",-1),Tn=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" ref"),t("span",{class:"token punctuation"},","),l(" reactive "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'vue'"),l("\n"),t("span",{class:"token keyword"},"const"),l(" foo "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'bar'"),t("span",{class:"token punctuation"},")"),l("\n"),t("span",{class:"token keyword"},"const"),l(" data "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"reactive"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"{"),l(" foo"),t("span",{class:"token punctuation"},","),l(" id"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token number"},"10"),l(),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),l("\ndata"),t("span",{class:"token punctuation"},"."),l("foo "),t("span",{class:"token comment"},"// 'bar'"),l("\n")])],-1),Vn=t("p",null,"And whenever you feel like to better work with objects, you can pass the ref into the reactive object, and when you access the property, reactive will unwrap the ref automatically for you. Changes to the original ref will also reflect to the reactive object!",-1),Sn={id:"unref-oppsite-of-ref",tabindex:"-1"},An=t("a",{class:"header-anchor",href:"#unref-oppsite-of-ref","aria-hidden":"true"},"#",-1),Rn=l(),Mn=t("code",null,"unref",-1),jn=l(" - Oppsite of Ref "),Cn=t("p",null,[t("code",null,"unref"),l(" is another Composition API I would like to introduce. As the name "),t("code",null,"unref"),l(" sounds, it’s kinda the opposite of ref. While the "),t("code",null,"ref()"),l(" function takes a value and turns it into a ref, "),t("code",null,"unref()"),l(" takes a ref and returns its value.")],-1),Dn=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token generic-function"},[t("span",{class:"token function"},"unref"),t("span",{class:"token generic class-name"},[t("span",{class:"token operator"},"<"),t("span",{class:"token constant"},"T"),t("span",{class:"token operator"},">")])]),t("span",{class:"token punctuation"},"("),l("r"),t("span",{class:"token operator"},":"),l(" Ref"),t("span",{class:"token operator"},"<"),t("span",{class:"token constant"},"T"),t("span",{class:"token operator"},">"),l(),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token constant"},"T"),t("span",{class:"token punctuation"},")"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token constant"},"T"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"return"),l(),t("span",{class:"token function"},"isRef"),t("span",{class:"token punctuation"},"("),l("r"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"?"),l(" r"),t("span",{class:"token punctuation"},"."),l("value "),t("span",{class:"token operator"},":"),l(" r\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),Wn=t("p",null,[l("The interesting part of it is that if you pass a plain value to "),t("code",null,"unref"),l(" it will return the value as-is to you, you can see the implementation is basically this.")],-1),Un=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" unref"),t("span",{class:"token punctuation"},","),l(" ref "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'vue'"),l("\n\n"),t("span",{class:"token keyword"},"const"),l(" foo "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'foo'"),t("span",{class:"token punctuation"},")"),l("\n"),t("span",{class:"token function"},"unref"),t("span",{class:"token punctuation"},"("),l("foo"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token comment"},"// 'foo'"),l("\n\n"),t("span",{class:"token keyword"},"const"),l(" bar "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token string"},"'bar'"),l("\n"),t("span",{class:"token function"},"unref"),t("span",{class:"token punctuation"},"("),l("bar"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token comment"},"// 'bar'"),l("\n")])],-1),_n=t("p",null,"This is not a big feature, but a good tip to unify your logic which I will show you soon",-1),Pn=t("h2",{id:"patterns-tips",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#patterns-tips","aria-hidden":"true"},"#"),l(" Patterns & Tips")],-1),zn=t("p",null,"That’s the tips for using ref and reactive. Here I’d like to share with you some patterns of writing composable functions.",-1),Hn=t("h2",{id:"what’s-composable-functions",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#what’s-composable-functions","aria-hidden":"true"},"#"),l(" What’s composable Functions")],-1),Ln=t("p",null,"So what’s composable functions?",-1),En=t("p",null,"It’s actually kind of hard to give a proper definition, but I’d think it’s like sets for reusable logic to make your code better organized, and separate the concerns.",-1),Bn=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token function"},"useDark"),t("span",{class:"token punctuation"},"("),l("options"),t("span",{class:"token operator"},":"),l(" UseDarkOptions "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token punctuation"},"{"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"const"),l(" preferredDark "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"usePreferredDark"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l("         "),t("span",{class:"token comment"},"// <--"),l("\n  "),t("span",{class:"token keyword"},"const"),l(" store "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"useStorage"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'vueuse-dark'"),t("span",{class:"token punctuation"},","),l(),t("span",{class:"token string"},"'auto'"),t("span",{class:"token punctuation"},")"),l("  "),t("span",{class:"token comment"},"// <--"),l("\n\n  "),t("span",{class:"token keyword"},"return"),l(),t("span",{class:"token generic-function"},[t("span",{class:"token function"},"computed"),t("span",{class:"token generic class-name"},[t("span",{class:"token operator"},"<"),t("span",{class:"token builtin"},"boolean"),t("span",{class:"token operator"},">")])]),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"{"),l("\n    "),t("span",{class:"token function"},"get"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n      "),t("span",{class:"token keyword"},"return"),l(" store"),t("span",{class:"token punctuation"},"."),l("value "),t("span",{class:"token operator"},"==="),l(),t("span",{class:"token string"},"'auto'"),l("\n        "),t("span",{class:"token operator"},"?"),l(" preferredDark"),t("span",{class:"token punctuation"},"."),l("value\n        "),t("span",{class:"token operator"},":"),l(" store"),t("span",{class:"token punctuation"},"."),l("value "),t("span",{class:"token operator"},"==="),l(),t("span",{class:"token string"},"'dark'"),l("\n    "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),l("\n    "),t("span",{class:"token function"},"set"),t("span",{class:"token punctuation"},"("),l("v"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n      store"),t("span",{class:"token punctuation"},"."),l("value "),t("span",{class:"token operator"},"="),l(" v "),t("span",{class:"token operator"},"==="),l(" preferredDark"),t("span",{class:"token punctuation"},"."),l("value \n        "),t("span",{class:"token operator"},"?"),l(),t("span",{class:"token string"},"'auto'"),l(),t("span",{class:"token operator"},":"),l(" v "),t("span",{class:"token operator"},"?"),l(),t("span",{class:"token string"},"'dark'"),l(),t("span",{class:"token operator"},":"),l(),t("span",{class:"token string"},"'light'"),l("\n    "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),l("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),qn=t("p",null,[l("Here is an example, the "),t("code",null,"useDark"),l(" function in VueUse is provided as a simple toggle to enable or disable the dark mode for apps. There are actually two variables involved, one is the system’s preference and one is users’ manual overrides. System preference can be got using media queries, while we would also need to use localStorage to read and store the user’s preference of different modes.")],-1),Fn=t("p",null,[l("As you can see in this code snippet, I have used two other composable functions "),t("a",{href:"https://vueuse.org/usePreferredDark",target:"_blank",rel:"noopener"},[t("code",null,"usePreferredDark")]),l(" and "),t("a",{href:"https://vueuse.org/useStorage",target:"_blank",rel:"noopener"},[t("code",null,"useStorage")]),l(", they will return two refs that reflecting on their states. Detailed things like monitoring the media query changes, the timing to read and write the storage are left to them. And all I need to do is logically composing their relationship into a single ref.")],-1),Kn=t("p",null,"You can see the full code or directly use it in VueUse with the link below.",-1),Yn=t("h3",{id:"think-as-connections",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#think-as-connections","aria-hidden":"true"},"#"),l(' Think as "Connections"')],-1),On=t("p",null,[l('The first methodology I want to share today is to think as "connections". Unlike hooks in React that will run on each updates, the '),t("code",null,"setup()"),l(" function in Vue only runs "),t("strong",null,"once"),l(" on component initialization, to construct the relations between your state and logic.")],-1),Xn=t("p",null,[l("You can think the equations in mathematics, where the left hand side and right hand side are always equal. Here we have "),t("code",null,"z=x^2+y^2"),l(", while "),t("code",null,"x"),l(" and "),t("code",null,"y"),l(" are independent variables, and "),t("code",null,"z"),l(" is a controlled variables relying on "),t("code",null,"x"),l(" and "),t("code",null,"y"),l(". Whenever I changed any of them, "),t("code",null,"z"),l(" will be updated accordingly (DEMO). Which is also similar to the formula in spreadsheets.")],-1),Gn=t("p",null,"So in composable functions, we could think arguments are input and the returns as the output. The output should be able to reflect on input changes automatically. A bit complicated? I will walk with you on that later with examples.",-1),$n=t("h3",{id:"one-thing-at-a-time",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#one-thing-at-a-time","aria-hidden":"true"},"#"),l(" One Thing at a Time")],-1),Nn=t("p",null,"Another aspect is to do one thing at a time - which is the same as how you write any code. No need for me to spend too much time on this, but basically they are listed here.",-1),Jn=t("ul",null,[t("li",null,"Extract duplicated logics into composable functions"),t("li",null,"Have meaningful names"),t("li",null,[l("Consistent naming conversions - "),t("code",null,"useXX"),l(),t("code",null,"createXX"),l(),t("code",null,"onXX")]),t("li",null,"Keep function small and simple"),t("li",null,'"Do one thing, and do it well"')],-1),Zn=t("p",null,[l("Note it’s also important to have a consistent naming conversion, like prefixed with "),t("code",null,"useXX"),l(" or "),t("code",null,"createXX"),l(" and so on to make those composable functions distinguishable from other functions.")],-1),Qn=t("h3",{id:"passing-ref-as-arguments",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#passing-ref-as-arguments","aria-hidden":"true"},"#"),l(" Passing Ref as Arguments")],-1),ns=t("p",null,"Alright, let’s start our first pattern today - Passing refs as arguments.",-1),ss=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token function"},"add"),t("span",{class:"token punctuation"},"("),l("a"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token builtin"},"number"),t("span",{class:"token punctuation"},","),l(" b"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token builtin"},"number"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"return"),l(" a "),t("span",{class:"token operator"},"+"),l(" b\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),as=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"let"),l(" a "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token number"},"1"),l("\n"),t("span",{class:"token keyword"},"let"),l(" b "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token number"},"2"),l("\n\n"),t("span",{class:"token keyword"},"let"),l(" c "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"add"),t("span",{class:"token punctuation"},"("),l("a"),t("span",{class:"token punctuation"},","),l(" b"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token comment"},"// 3"),l("\n")])],-1),ts=t("p",null,[l("Here we have a plain add function that sums up the two arguments "),t("code",null,"a"),l(" and "),t("code",null,"b"),l(". You can also see the example on the right.")],-1),es=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token function"},"add"),t("span",{class:"token punctuation"},"("),l("a"),t("span",{class:"token operator"},":"),l(" Ref"),t("span",{class:"token operator"},"<"),t("span",{class:"token builtin"},"number"),t("span",{class:"token operator"},">"),t("span",{class:"token punctuation"},","),l(" b"),t("span",{class:"token operator"},":"),l(" Ref"),t("span",{class:"token operator"},"<"),t("span",{class:"token builtin"},"number"),t("span",{class:"token operator"},">"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"return"),l(),t("span",{class:"token function"},"computed"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(" a"),t("span",{class:"token punctuation"},"."),l("value "),t("span",{class:"token operator"},"+"),l(" b"),t("span",{class:"token punctuation"},"."),l("value"),t("span",{class:"token punctuation"},")"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),os=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"const"),l(" a "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},")"),l("\n"),t("span",{class:"token keyword"},"const"),l(" b "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"2"),t("span",{class:"token punctuation"},")"),l("\n\n"),t("span",{class:"token keyword"},"const"),l(" c "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"add"),t("span",{class:"token punctuation"},"("),l("a"),t("span",{class:"token punctuation"},","),l(" b"),t("span",{class:"token punctuation"},")"),l("\nc"),t("span",{class:"token punctuation"},"."),l("value "),t("span",{class:"token comment"},"// 3"),l("\n")])],-1),cs=t("p",null,[l("And then we can make this function accepting refs, and return a computed ref with their sum. Then we can pass the refs to it as we normally would with plain values. The difference here is that the returned value is also a ref, but it will always be up-to-date with the ref "),t("code",null,"a"),l(" and "),t("code",null,"b"),l(".")],-1),ls=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token function"},"add"),t("span",{class:"token punctuation"},"("),l("\n  a"),t("span",{class:"token operator"},":"),l(" Ref"),t("span",{class:"token operator"},"<"),t("span",{class:"token builtin"},"number"),t("span",{class:"token operator"},">"),l(),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token builtin"},"number"),t("span",{class:"token punctuation"},","),l("\n  b"),t("span",{class:"token operator"},":"),l(" Ref"),t("span",{class:"token operator"},"<"),t("span",{class:"token builtin"},"number"),t("span",{class:"token operator"},">"),l(),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token builtin"},"number"),l("\n"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"return"),l(),t("span",{class:"token function"},"computed"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(),t("span",{class:"token function"},"unref"),t("span",{class:"token punctuation"},"("),l("a"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"+"),l(),t("span",{class:"token function"},"unref"),t("span",{class:"token punctuation"},"("),l("b"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),ps=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"const"),l(" a "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},")"),l("\n\n"),t("span",{class:"token keyword"},"const"),l(" c "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"add"),t("span",{class:"token punctuation"},"("),l("a"),t("span",{class:"token punctuation"},","),l(),t("span",{class:"token number"},"5"),t("span",{class:"token punctuation"},")"),l("\nc"),t("span",{class:"token punctuation"},"."),l("value "),t("span",{class:"token comment"},"// 6"),l("\n")])],-1),us=t("p",null,[l("And remember the "),t("code",null,"unref"),l(" function we mentioned before? We can actually make this function more flexible, by accepting both refs and plain values. And use "),t("code",null,"unref"),l(" to get their values. We can also make the addition possible between a ref and a value.")],-1),rs=t("h3",{id:"mayberef",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#mayberef","aria-hidden":"true"},"#"),l(" MaybeRef")],-1),is=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"type"),l(),t("span",{class:"token class-name"},[l("MaybeRef"),t("span",{class:"token operator"},"<"),t("span",{class:"token constant"},"T"),t("span",{class:"token operator"},">")]),l(),t("span",{class:"token operator"},"="),l(" Ref"),t("span",{class:"token operator"},"<"),t("span",{class:"token constant"},"T"),t("span",{class:"token operator"},">"),l(),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token constant"},"T"),l("\n")])],-1),ks=t("p",null,[l("Here is a simple TypeScript’s type helper called "),t("code",null,"MaybeRef"),l(" that we have used a lot in VueUse. It’s a union of generic "),t("code",null,"T"),l(" and "),t("code",null,"Ref<T>"),l(".")],-1),ds=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token function"},"useTimeAgo"),t("span",{class:"token punctuation"},"("),l("\n  time"),t("span",{class:"token operator"},":"),l(" Date "),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token builtin"},"number"),l(),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token builtin"},"string"),l(),t("span",{class:"token operator"},"|"),l(" Ref"),t("span",{class:"token operator"},"<"),l("Date "),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token builtin"},"number"),l(),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token builtin"},"string"),t("span",{class:"token operator"},">"),t("span",{class:"token punctuation"},","),l("\n"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"return"),l(),t("span",{class:"token function"},"computed"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(),t("span",{class:"token function"},"someFormating"),t("span",{class:"token punctuation"},"("),t("span",{class:"token function"},"unref"),t("span",{class:"token punctuation"},"("),l("time"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),hs=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" computed"),t("span",{class:"token punctuation"},","),l(" unref"),t("span",{class:"token punctuation"},","),l(" Ref "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'vue'"),l("\n\n"),t("span",{class:"token keyword"},"type"),l(),t("span",{class:"token class-name"},[l("MaybeRef"),t("span",{class:"token operator"},"<"),t("span",{class:"token constant"},"T"),t("span",{class:"token operator"},">")]),l(),t("span",{class:"token operator"},"="),l(" Ref"),t("span",{class:"token operator"},"<"),t("span",{class:"token constant"},"T"),t("span",{class:"token operator"},">"),l(),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token constant"},"T"),l("\n\n"),t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token function"},"useTimeAgo"),t("span",{class:"token punctuation"},"("),l("\n  time"),t("span",{class:"token operator"},":"),l(" MaybeRef"),t("span",{class:"token operator"},"<"),l("Date "),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token builtin"},"number"),l(),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token builtin"},"string"),t("span",{class:"token operator"},">"),t("span",{class:"token punctuation"},","),l("\n"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"return"),l(),t("span",{class:"token function"},"computed"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(),t("span",{class:"token function"},"someFormating"),t("span",{class:"token punctuation"},"("),t("span",{class:"token function"},"unref"),t("span",{class:"token punctuation"},"("),l("time"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),fs=t("p",null,[l("In this case, we have the function useTimeAgo that accepts a wide range of Date-like types as an argument. Normally if you want to accept refs, you would need to write them again as Ref versions. With this helper, you can make the type shorter and more readable (change code). A cool point it that this works great with "),t("code",null,"unref"),l(", it can infer the correct type for "),t("code",null,"MaybeRef"),l(".")],-1),ms={id:"make-it-flexible",tabindex:"-1"},gs=t("a",{class:"header-anchor",href:"#make-it-flexible","aria-hidden":"true"},"#",-1),ys=l(" Make it Flexible "),ws=t("p",null,"Think your functions like LEGO, there should have many different ways of composing them for different needs.",-1),bs=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" useTitle "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'@vueuse/core'"),l("\n\n"),t("span",{class:"token keyword"},"const"),l(" title "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"useTitle"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l("\n\ntitle"),t("span",{class:"token punctuation"},"."),l("value "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token string"},"'Hello World'"),l("\n"),t("span",{class:"token comment"},"// now the page's title changed"),l("\n")])],-1),vs=t("p",null,[l("Here we take "),t("code",null,"useTitle"),l(" function from VueUse as an example. Basically when you call it, you will get a special ref that binds to your page’s title. Whenever you change the ref’s value, the page’s title will also be updated. Similarly, when the page’s title changed externally, the change will also be reflect to the ref’s value.")],-1),xs=t("p",null,"Looks good, right? But It creates a new ref whenever you call it. To make it more flexible, we can actually bind an existing ref, even computed!",-1),Is=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" ref"),t("span",{class:"token punctuation"},","),l(" computed "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'vue'"),l("\n"),t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" useTitle "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'@vueuse/core'"),l("\n\n"),t("span",{class:"token keyword"},"const"),l(" name "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'Hello'"),t("span",{class:"token punctuation"},")"),l("\n"),t("span",{class:"token keyword"},"const"),l(" title "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"computed"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"return"),l(),t("span",{class:"token template-string"},[t("span",{class:"token template-punctuation string"},"`"),t("span",{class:"token interpolation"},[t("span",{class:"token interpolation-punctuation punctuation"},"${"),l("name"),t("span",{class:"token punctuation"},"."),l("value"),t("span",{class:"token interpolation-punctuation punctuation"},"}")]),t("span",{class:"token string"}," - World"),t("span",{class:"token template-punctuation string"},"`")]),l("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),l("\n\n"),t("span",{class:"token function"},"useTitle"),t("span",{class:"token punctuation"},"("),l("title"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token comment"},"// Hello - World"),l("\n\nname"),t("span",{class:"token punctuation"},"."),l("value "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token string"},"'Hi'"),l(),t("span",{class:"token comment"},"// Hi - World"),l("\n")])],-1),Ts=t("p",null,"Here you can see, I constructed a computed with a ref, when I change the source ref, the computed get re-evaluated so as the page’s title.",-1),Vs={id:"usetitle-case",tabindex:"-1"},Ss=t("a",{class:"header-anchor",href:"#usetitle-case","aria-hidden":"true"},"#",-1),As=l(),Rs=t("code",null,"useTitle",-1),Ms=l(),js=l("Case"),Cs=t("p",null,"You must be wondering how could this be implemented. Let’s take a look at a simplified version of it.",-1),Ds=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" ref"),t("span",{class:"token punctuation"},","),l(" watch "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'vue'"),l("\n"),t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" MaybeRef "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'@vueuse/core'"),l("\n\n"),t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token function"},"useTitle"),t("span",{class:"token punctuation"},"("),l("\n  newTitle"),t("span",{class:"token operator"},":"),l(" MaybeRef"),t("span",{class:"token operator"},"<"),t("span",{class:"token builtin"},"string"),l(),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token keyword"},"null"),l(),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token keyword"},"undefined"),t("span",{class:"token operator"},">"),l("\n"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"const"),l(" title "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),l("newTitle "),t("span",{class:"token operator"},"||"),l(" document"),t("span",{class:"token punctuation"},"."),l("title"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token comment"},"// <-- 1"),l("\n\n  "),t("span",{class:"token function"},"watch"),t("span",{class:"token punctuation"},"("),l("title"),t("span",{class:"token punctuation"},","),l(),t("span",{class:"token punctuation"},"("),l("t"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(),t("span",{class:"token punctuation"},"{"),l(),t("span",{class:"token comment"},"// <-- 2"),l("\n    "),t("span",{class:"token keyword"},"if"),l(),t("span",{class:"token punctuation"},"("),l("t "),t("span",{class:"token operator"},"!="),l(),t("span",{class:"token keyword"},"null"),t("span",{class:"token punctuation"},")"),l("\n      document"),t("span",{class:"token punctuation"},"."),l("title "),t("span",{class:"token operator"},"="),l(" t\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),l(),t("span",{class:"token punctuation"},"{"),l(" immediate"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token boolean"},"true"),l(),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),l("\n\n  "),t("span",{class:"token keyword"},"return"),l(" title\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),Ws=t("p",null,"It’s actually only two statements! How?",-1),Us=t("p",null,"At the first line, unified the ref from the user, or create a new one. And on the second line, it watches the changes to the ref and sync up with page’s title.",-1),_s=t("p",null,"Emm, maybe it’s a little bit hard to catch on what’s happened in the first line, let me explain a bit.",-1),Ps={id:"reuse-refs",tabindex:"-1"},zs=t("a",{class:"header-anchor",href:"#reuse-refs","aria-hidden":"true"},"#",-1),Hs=l(" Reuse Refs "),Ls=t("p",null,"Here, we utilized an interesting behavior of the ref function.",-1),Es=t("p",null,[l("Similar to "),t("code",null,"unref"),l(" - "),t("code",null,"ref"),l(" also checks whether the passed value is ref or not. If you passed a ref to it, it will it as-is - since it’s already a ref, there is no need to make another.")],-1),Bs=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"const"),l(" foo "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},")"),l("   "),t("span",{class:"token comment"},"// Ref<1>"),l("\n"),t("span",{class:"token keyword"},"const"),l(" bar "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),l("foo"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token comment"},"// Ref<1>"),l("\n\nfoo "),t("span",{class:"token operator"},"==="),l(" bar "),t("span",{class:"token comment"},"// true"),l("\n")])],-1),qs=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token function"},"useFoo"),t("span",{class:"token punctuation"},"("),l("foo"),t("span",{class:"token operator"},":"),l(" Ref"),t("span",{class:"token operator"},"<"),t("span",{class:"token builtin"},"string"),t("span",{class:"token operator"},">"),l(),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token builtin"},"string"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token comment"},"// no need!"),l("\n  "),t("span",{class:"token keyword"},"const"),l(" bar "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"isRef"),t("span",{class:"token punctuation"},"("),l("foo"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"?"),l(" foo "),t("span",{class:"token operator"},":"),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),l("foo"),t("span",{class:"token punctuation"},")"),l("\n\n  "),t("span",{class:"token comment"},"// they are the same"),l("\n  "),t("span",{class:"token keyword"},"const"),l(" bar "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),l("foo"),t("span",{class:"token punctuation"},")"),l("\n\n  "),t("span",{class:"token comment"},"/* ... */"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),Fs=t("p",null,[l("This could also be extremely useful in composable functions that take "),t("code",null,"MaybeRef"),l(" as argument types.")],-1),Ks=t("h3",{id:"ref-undef",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#ref-undef","aria-hidden":"true"},"#"),l(),t("code",null,"ref"),l(" / "),t("code",null,"undef")],-1),Ys=t("p",null,"Let’s do a quick summary so far.",-1),Os=t("ul",null,[t("li",null,[t("code",null,"MaybeRef<T>"),l(" works well with "),t("code",null,"ref"),l(" and "),t("code",null,"unref"),l(".")]),t("li",null,[l("Use "),t("code",null,"ref()"),l(" when you want to normalized it as a Ref.")]),t("li",null,[l("Use "),t("code",null,"unref()"),l(" when you want to have the value.")])],-1),Xs=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"type"),l(),t("span",{class:"token class-name"},[l("MaybeRef"),t("span",{class:"token operator"},"<"),t("span",{class:"token constant"},"T"),t("span",{class:"token operator"},">")]),l(),t("span",{class:"token operator"},"="),l(" Ref"),t("span",{class:"token operator"},"<"),t("span",{class:"token constant"},"T"),t("span",{class:"token operator"},">"),l(),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token constant"},"T"),l("\n\n"),t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token generic-function"},[t("span",{class:"token function"},"useBala"),t("span",{class:"token generic class-name"},[t("span",{class:"token operator"},"<"),t("span",{class:"token constant"},"T"),t("span",{class:"token operator"},">")])]),t("span",{class:"token punctuation"},"("),l("arg"),t("span",{class:"token operator"},":"),l(" MaybeRef"),t("span",{class:"token operator"},"<"),t("span",{class:"token constant"},"T"),t("span",{class:"token operator"},">"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"const"),l(" reference "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),l("arg"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token comment"},"// get the ref"),l("\n  "),t("span",{class:"token keyword"},"const"),l(" value "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"unref"),t("span",{class:"token punctuation"},"("),l("arg"),t("span",{class:"token punctuation"},")"),l("   "),t("span",{class:"token comment"},"// get the value"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),Gs=t("p",null,[l("We can use "),t("code",null,"MaybeRef"),l(" in arguments to make the function flexible, and use "),t("code",null,"ref()"),l(" when you want to normalized it as a Ref and use "),t("code",null,"unref()"),l(" when you want to get the value. Both of them are universal and no conditions needed.")],-1),$s={id:"object-of-refs",tabindex:"-1"},Ns=t("a",{class:"header-anchor",href:"#object-of-refs","aria-hidden":"true"},"#",-1),Js=l(" Object of Refs "),Zs=t("p",null,"Another pattern today is to use objects of refs. When you need to return multiple data entries in a composable function, consider returns an object composed by refs.",-1),Qs=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" ref"),t("span",{class:"token punctuation"},","),l(" reactive "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'vue'"),l("\n\n"),t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token function"},"useMouse"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"return"),l(),t("span",{class:"token punctuation"},"{"),l(" \n    x"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},","),l("\n    y"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token function"},"ref"),t("span",{class:"token punctuation"},"("),t("span",{class:"token number"},"0"),t("span",{class:"token punctuation"},")"),l("\n  "),t("span",{class:"token punctuation"},"}"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n\n"),t("span",{class:"token keyword"},"const"),l(),t("span",{class:"token punctuation"},"{"),l(" x"),t("span",{class:"token punctuation"},","),l(" y "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"useMouse"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l("\n"),t("span",{class:"token keyword"},"const"),l(" mouse "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"reactive"),t("span",{class:"token punctuation"},"("),t("span",{class:"token function"},"useMouse"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),l("\n\nmouse"),t("span",{class:"token punctuation"},"."),l("x "),t("span",{class:"token operator"},"==="),l(" x"),t("span",{class:"token punctuation"},"."),l("value "),t("span",{class:"token comment"},"// true"),l("\n")])],-1),na=t("p",null,"In this way, users can have the full features of ES6 object destructure. The restructure values are refs, so the reactivity still remains, and users can also rename them, or take only partial of what they want.",-1),sa=t("p",null,"On this other hand, it’s also flexible enough when users want to use it as a single object, simply wrap it with the reactive function, the refs will get unwrapped as a property automatically.",-1),aa=t("p",null,[l("That said, users can get benefits from both "),t("code",null,"ref "),l("and "),t("code",null,"reactive"),l(" as need.")],-1),ta={id:"async-to-sync",tabindex:"-1"},ea=t("a",{class:"header-anchor",href:"#async-to-sync","aria-hidden":"true"},"#",-1),oa=l(' Async to "Sync" '),ca=t("p",null,'Since we are constructing "connections" using Composition API, we can actually make async functions to "sync" by building the connections first before it resolves.',-1),la=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"const"),l(" data "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token keyword"},"await"),l(),t("span",{class:"token function"},"fetch"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'https://api.github.com/'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"then"),t("span",{class:"token punctuation"},"("),l("r "),t("span",{class:"token operator"},"=>"),l(" r"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"json"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),l("\n\n"),t("span",{class:"token comment"},"// use data"),l("\n")])],-1),pa=t("p",null,[l("Let’s say we want to request some data use the "),t("code",null,"fetch"),l(" API. Normally we need to "),t("code",null,"await"),l(" the request been responded and data been parsed, before we can use the data. With Composition API, we can make the data as a ref of null, then be fulfilled later.")],-1),ua=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"const"),l(),t("span",{class:"token punctuation"},"{"),l(" data "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"useFetch"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'https://api.github.com/'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"json"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l("\n\n"),t("span",{class:"token keyword"},"const"),l(" user_url "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"computed"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(" data"),t("span",{class:"token punctuation"},"."),l("value"),t("span",{class:"token operator"},"?."),l("user_url"),t("span",{class:"token punctuation"},")"),l("\n")])],-1),ra=t("p",null,"This can make your apps take the time to handle other stuff while waiting for the data to be fetched. The idea is similar to react’s stale-while-revalidate, but with much easier implementation.",-1),ia={id:"usefetch-case",tabindex:"-1"},ka=t("a",{class:"header-anchor",href:"#usefetch-case","aria-hidden":"true"},"#",-1),da=l(),ha=t("code",null,"useFetch",-1),fa=l(),ma=l("Case"),ga=t("p",null,[l("The implementation can be simplified down to this, all you have to do is to assign the value to "),t("code",null,"ref"),l(" when the promise got resolved.")],-1),ya=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token generic-function"},[t("span",{class:"token function"},"useFetch"),t("span",{class:"token generic class-name"},[t("span",{class:"token operator"},"<"),t("span",{class:"token constant"},"R"),t("span",{class:"token operator"},">")])]),t("span",{class:"token punctuation"},"("),l("url"),t("span",{class:"token operator"},":"),l(" MaybeRef"),t("span",{class:"token operator"},"<"),t("span",{class:"token builtin"},"string"),t("span",{class:"token operator"},">"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"const"),l(" data "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token generic-function"},[t("span",{class:"token function"},"shallowRef"),t("span",{class:"token generic class-name"},[t("span",{class:"token operator"},"<"),t("span",{class:"token constant"},"T"),l(),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token keyword"},"undefined"),t("span",{class:"token operator"},">")])]),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l("\n  "),t("span",{class:"token keyword"},"const"),l(" error "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token generic-function"},[t("span",{class:"token function"},"shallowRef"),t("span",{class:"token generic class-name"},[t("span",{class:"token operator"},"<"),l("Error "),t("span",{class:"token operator"},"|"),l(),t("span",{class:"token keyword"},"undefined"),t("span",{class:"token operator"},">")])]),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l("\n\n  "),t("span",{class:"token function"},"fetch"),t("span",{class:"token punctuation"},"("),t("span",{class:"token function"},"unref"),t("span",{class:"token punctuation"},"("),l("url"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),l("\n    "),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"then"),t("span",{class:"token punctuation"},"("),l("r "),t("span",{class:"token operator"},"=>"),l(" r"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"json"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),l("\n    "),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"then"),t("span",{class:"token punctuation"},"("),l("r "),t("span",{class:"token operator"},"=>"),l(" data"),t("span",{class:"token punctuation"},"."),l("value "),t("span",{class:"token operator"},"="),l(" r"),t("span",{class:"token punctuation"},")"),l("\n    "),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"catch"),t("span",{class:"token punctuation"},"("),l("e "),t("span",{class:"token operator"},"=>"),l(" error"),t("span",{class:"token punctuation"},"."),l("value "),t("span",{class:"token operator"},"="),l(" e"),t("span",{class:"token punctuation"},")"),l("\n\n  "),t("span",{class:"token keyword"},"return"),l(),t("span",{class:"token punctuation"},"{"),l("\n    data"),t("span",{class:"token punctuation"},","),l("\n    error\n  "),t("span",{class:"token punctuation"},"}"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),wa=t("p",null,"In the real world, we might also need some flags to show the current state of the request, where you can find the full code in VueUse.",-1),ba={id:"side-effects-self-cleanup",tabindex:"-1"},va=t("a",{class:"header-anchor",href:"#side-effects-self-cleanup","aria-hidden":"true"},"#",-1),xa=l(" Side-effects Self Cleanup "),Ia=t("p",null,[t("code",null,"watch"),l(" and "),t("code",null,"computed"),l(" functions in Vue will stop themselves automatically along with the components unmounting. We’d recommend following the same pattern for your custom composable functions.")],-1),Ta=t("p",null,[l("By calling the "),t("code",null,"onUnmounted"),l(" hooks inside your composable functions, you can schedule the effect clean-up logic.")],-1),Va=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" onUnmounted "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'vue'"),l("\n\n"),t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token function"},"useEventListener"),t("span",{class:"token punctuation"},"("),l("target"),t("span",{class:"token operator"},":"),l(" EventTarget"),t("span",{class:"token punctuation"},","),l(" name"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token builtin"},"string"),t("span",{class:"token punctuation"},","),l(" fn"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token builtin"},"any"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n  target"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"addEventListener"),t("span",{class:"token punctuation"},"("),l("name"),t("span",{class:"token punctuation"},","),l(" fn"),t("span",{class:"token punctuation"},")"),l("\n\n  "),t("span",{class:"token function"},"onUnmounted"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(),t("span",{class:"token punctuation"},"{"),l("\n    target"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"removeEventListener"),t("span",{class:"token punctuation"},"("),l("name"),t("span",{class:"token punctuation"},","),l(" fn"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token comment"},"// <--"),l("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),Sa=t("p",null,[l("For example, it’s common to use "),t("code",null,"addEventListener"),l(" to register the handler to DOM events. When you finish the usage, you would also need to remember to unregister it using "),t("code",null,"removeEventListener"),l(". In this case, we can have a function "),t("code",null,"useEventListener"),l(" that unregister itself along with the component so you don’t need to worry about it anymore.")],-1),Aa={id:"effectscope-rfc-upcoming",tabindex:"-1"},Ra=t("a",{class:"header-anchor",href:"#effectscope-rfc-upcoming","aria-hidden":"true"},"#",-1),Ma=l(),ja=t("code",null,"effectScope",-1),Ca=l(" RFC "),Da=l("Upcoming"),Wa=t("p",null,[l("While side-effects auto clean-up is nice, sometimes you might want to have better controls over when to do that. I drafted an RFC proposing a new API called "),t("code",null,"effectScope"),l(" to collect those effects into a single instance, that you can stop them together at the time you want. This is likely to be implemented and shipped with Vue 3.1. Check out for more details if it get you interested.")],-1),Ua=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token comment"},"// effect, computed, watch, watchEffect created inside the scope will be collected"),l("\n\n"),t("span",{class:"token keyword"},"const"),l(" scope "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"effectScope"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"const"),l(" doubled "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"computed"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(" counter"),t("span",{class:"token punctuation"},"."),l("value "),t("span",{class:"token operator"},"*"),l(),t("span",{class:"token number"},"2"),t("span",{class:"token punctuation"},")"),l("\n\n  "),t("span",{class:"token function"},"watch"),t("span",{class:"token punctuation"},"("),l("doubled"),t("span",{class:"token punctuation"},","),l(),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(),t("span",{class:"token builtin"},"console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),l("double"),t("span",{class:"token punctuation"},"."),l("value"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),l("\n\n  "),t("span",{class:"token function"},"watchEffect"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token operator"},"=>"),l(),t("span",{class:"token builtin"},"console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'Count: '"),t("span",{class:"token punctuation"},","),l(" double"),t("span",{class:"token punctuation"},"."),l("value"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),l("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),l("\n\n"),t("span",{class:"token comment"},"// dispose all effects in the scope"),l("\n"),t("span",{class:"token function"},"stop"),t("span",{class:"token punctuation"},"("),l("scope"),t("span",{class:"token punctuation"},")"),l("\n")])],-1),_a=t("h3",{id:"typed-provide-inject",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#typed-provide-inject","aria-hidden":"true"},"#"),l(" Typed Provide / Inject")],-1),Pa=t("p",null,[l("We have a set of new APIs called "),t("code",null,"provide"),l(" and "),t("code",null,"inject"),l(". It’s basically for sharing some context for the component’s children to consume and reuse. They are two separate function, which means TypeScript can’t actually infer the types for each context automatically.")],-1),za=t("p",null,[l("But here we have a solution for that. Vue provided a type helper called "),t("code",null,"InjectionKey"),l(" where you can define a symbol that carries the type you want, and then it will hint "),t("code",null,"provide"),l(" and "),t("code",null,"inject"),l(" to have proper autocompletion and type checking.")],-1),Ha=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token comment"},"// context.ts"),l("\n"),t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" InjectionKey "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'vue'"),l("\n\n"),t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"interface"),l(),t("span",{class:"token class-name"},"UserInfo"),l(),t("span",{class:"token punctuation"},"{"),l("\n  id"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token builtin"},"number"),l("\n  name"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token builtin"},"string"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n\n"),t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"const"),l(" injectKeyUser"),t("span",{class:"token operator"},":"),l(" InjectionKey"),t("span",{class:"token operator"},"<"),l("UserInfo"),t("span",{class:"token operator"},">"),l(),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"Symbol"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l("\n")])],-1),La=t("p",null,[l("For example, here I defined an interface "),t("code",null,"UserInfo"),l(" which contains two properties. And I exported a symbol with the "),t("code",null,"InjectionKey"),l(" type.")],-1),Ea=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token comment"},"// parent.vue"),l("\n"),t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" provide "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'vue'"),l(" \n"),t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" injectKeyUser "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'./context'"),l("\n\n"),t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"default"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token function"},"setup"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n    "),t("span",{class:"token function"},"provide"),t("span",{class:"token punctuation"},"("),l("injectKeyUser"),t("span",{class:"token punctuation"},","),l(),t("span",{class:"token punctuation"},"{"),l("\n      id"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token string"},"'7'"),t("span",{class:"token punctuation"},","),l(),t("span",{class:"token comment"},"// type error: should be number"),l("\n      name"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token string"},"'Anthony'"),l("\n    "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),l("\n  "),t("span",{class:"token punctuation"},"}"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),Ba=t("p",null,[l("In usage, I can use the "),t("code",null,"provide"),l(" function to provide the data with key. Can you see here I get a type error that the id should be a number. So I can catch up the error right away before it goes to production.")],-1),qa=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token comment"},"// child.vue"),l("\n"),t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" inject "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'vue'"),l(" \n"),t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" injectKeyUser "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'./context'"),l("\n\n"),t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"default"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token function"},"setup"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n    "),t("span",{class:"token keyword"},"const"),l(" user "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"inject"),t("span",{class:"token punctuation"},"("),l("injectKeyUser"),t("span",{class:"token punctuation"},")"),l(" \n    "),t("span",{class:"token comment"},"// UserInfo | undefined"),l("\n\n    "),t("span",{class:"token keyword"},"if"),l(),t("span",{class:"token punctuation"},"("),l("user"),t("span",{class:"token punctuation"},")"),l("\n      "),t("span",{class:"token builtin"},"console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),l("user"),t("span",{class:"token punctuation"},"."),l("name"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token comment"},"// Anthony"),l("\n  "),t("span",{class:"token punctuation"},"}"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),Fa=t("p",null,[l("And in the child component, we can use the "),t("code",null,"inject"),l(" function with the key as well. You can see it correctly infers the type "),t("code",null,"UserInfo"),l(" and so as its property.")],-1),Ka={id:"shared-state",tabindex:"-1"},Ya=t("a",{class:"header-anchor",href:"#shared-state","aria-hidden":"true"},"#",-1),Oa=l(" Shared State "),Xa=t("p",null,"With the flexibility of Vue’s Composition API, sharing state is actually quite simple.",-1),Ga=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token comment"},"// shared.ts"),l("\n"),t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" reactive "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'vue'"),l("\n\n"),t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"const"),l(" state "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"reactive"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"{"),l("\n  foo"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},","),l("\n  bar"),t("span",{class:"token operator"},":"),l(),t("span",{class:"token string"},"'Hello'"),l("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),l("\n")])],-1),$a=t("p",null,"You can declare some ref or reactive state in a js module, and import them to your components. Since they are using the same instance, the state will be just in sync.",-1),Na=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token comment"},"// A.vue"),l("\n"),t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" state "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'./shared.ts'"),l("\n\nstate"),t("span",{class:"token punctuation"},"."),l("foo "),t("span",{class:"token operator"},"+="),l(),t("span",{class:"token number"},"1"),l("\n")])],-1),Ja=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token comment"},"// B.vue"),l("\n"),t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" state "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'./shared.ts'"),l("\n\n"),t("span",{class:"token builtin"},"console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),l("state"),t("span",{class:"token punctuation"},"."),l("foo"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token comment"},"// 2"),l("\n")])],-1),Za=t("p",null,"But please note this is actually not SSR compatible. In SSR your server will create a new app on each request, where this approach will keep the state persistent across multiple rendering. And normally it’s not what we would expect.",-1),Qa={id:"shared-state-ssr-friendly",tabindex:"-1"},nt=t("a",{class:"header-anchor",href:"#shared-state-ssr-friendly","aria-hidden":"true"},"#",-1),st=l(" Shared State (SSR friendly) "),at=t("p",null,"Let’s see if we can make a solution for it to work with SSR.",-1),tt=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"const"),l(" myStateKey"),t("span",{class:"token operator"},":"),l(" InjectionKey"),t("span",{class:"token operator"},"<"),l("MyState"),t("span",{class:"token operator"},">"),l(),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"Symbol"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l("\n\n"),t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token function"},"createMyState"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"const"),l(" state "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token punctuation"},"{"),l("\n    "),t("span",{class:"token comment"},"/* ... */"),l("\n  "),t("span",{class:"token punctuation"},"}"),l("\n\n  "),t("span",{class:"token keyword"},"return"),l(),t("span",{class:"token punctuation"},"{"),l("\n    "),t("span",{class:"token function"},"install"),t("span",{class:"token punctuation"},"("),l("app"),t("span",{class:"token operator"},":"),l(" App"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n      app"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"provide"),t("span",{class:"token punctuation"},"("),l("myStateKey"),t("span",{class:"token punctuation"},","),l(" state"),t("span",{class:"token punctuation"},")"),l("\n    "),t("span",{class:"token punctuation"},"}"),l("\n  "),t("span",{class:"token punctuation"},"}"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n\n"),t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token function"},"useMyState"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token operator"},":"),l(" MyState "),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"return"),l(),t("span",{class:"token function"},"inject"),t("span",{class:"token punctuation"},"("),l("myStateKey"),t("span",{class:"token punctuation"},")"),t("span",{class:"token operator"},"!"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),et=t("p",null,[l("By using "),t("code",null,"provide"),l(" and "),t("code",null,"inject"),l(", to share the state one the App context, which means it will be created every time when the server doing the rendering. You can see here I have two function, "),t("code",null,"createMyState"),l(" and "),t("code",null,"useMyState"),l(". "),t("code",null,"createMyState"),l(" will returns a Vue plugin that provide the state to the App. While "),t("code",null,"useMyState"),l(" is just a wrapper of "),t("code",null,"inject"),l(" using the same key.")],-1),ot=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token comment"},"// main.ts"),l("\n"),t("span",{class:"token keyword"},"const"),l(" App "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"createApp"),t("span",{class:"token punctuation"},"("),l("App"),t("span",{class:"token punctuation"},")"),l("\n\napp"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"use"),t("span",{class:"token punctuation"},"("),t("span",{class:"token function"},"createMyState"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),l("\n")])],-1),ct=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token comment"},"// A.vue"),l("\n\n"),t("span",{class:"token comment"},"// use everywhere in your app"),l("\n"),t("span",{class:"token keyword"},"const"),l(" state "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"useMyState"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l("\n")])],-1),lt=t("p",null,[l("In usage, we can create the state in the main entry and pass it to "),t("code",null,"app.use"),l(". Then you can use the hook "),t("code",null,"useMyState"),l(" everywhere in your components.")],-1),pt=t("p",null,[l("If you have ever tried Vue Router v4, it actually uses a similar method to do that like "),t("code",null,"createRouter"),l(" and `useRouter.")],-1),ut={id:"usevmodel",tabindex:"-1"},rt=t("a",{class:"header-anchor",href:"#usevmodel","aria-hidden":"true"},"#",-1),it=l(" useVModel "),kt=t("p",null,[l("One last tip I’d like to share is a utility called "),t("code",null,"useVModel"),l(".")],-1),dt=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"function"),l(),t("span",{class:"token function"},"useVModel"),t("span",{class:"token punctuation"},"("),l("props"),t("span",{class:"token punctuation"},","),l(" name"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token keyword"},"const"),l(" emit "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"getCurrentInstance"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"."),l("emit\n\n  "),t("span",{class:"token keyword"},"return"),l(),t("span",{class:"token function"},"computed"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"{"),l("\n    "),t("span",{class:"token function"},"get"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n      "),t("span",{class:"token keyword"},"return"),l(" props"),t("span",{class:"token punctuation"},"["),l("name"),t("span",{class:"token punctuation"},"]"),l("\n    "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),l("\n    "),t("span",{class:"token function"},"set"),t("span",{class:"token punctuation"},"("),l("v"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n      "),t("span",{class:"token function"},"emit"),t("span",{class:"token punctuation"},"("),t("span",{class:"token template-string"},[t("span",{class:"token template-punctuation string"},"`"),t("span",{class:"token string"},"update:"),t("span",{class:"token interpolation"},[t("span",{class:"token interpolation-punctuation punctuation"},"${"),l("name"),t("span",{class:"token interpolation-punctuation punctuation"},"}")]),t("span",{class:"token template-punctuation string"},"`")]),t("span",{class:"token punctuation"},","),l(" v"),t("span",{class:"token punctuation"},")"),l("\n    "),t("span",{class:"token punctuation"},"}"),l("\n  "),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),l("\n"),t("span",{class:"token punctuation"},"}"),l("\n")])],-1),ht=t("p",null,[l("It’s just a simple wrapper to the component model to bind with "),t("code",null,"props"),l(" and "),t("code",null,"emit"),l(". This is actually a lifesaver to me.")],-1),ft=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"export"),l(),t("span",{class:"token keyword"},"default"),l(),t("span",{class:"token function"},"defineComponent"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"{"),l("\n  "),t("span",{class:"token function"},"setup"),t("span",{class:"token punctuation"},"("),l("props"),t("span",{class:"token punctuation"},")"),l(),t("span",{class:"token punctuation"},"{"),l("\n    "),t("span",{class:"token keyword"},"const"),l(" value "),t("span",{class:"token operator"},"="),l(),t("span",{class:"token function"},"useVModel"),t("span",{class:"token punctuation"},"("),l("props"),t("span",{class:"token punctuation"},","),l(),t("span",{class:"token string"},"'value'"),t("span",{class:"token punctuation"},")"),l("\n\n    "),t("span",{class:"token keyword"},"return"),l(),t("span",{class:"token punctuation"},"{"),l(" value "),t("span",{class:"token punctuation"},"}"),l("\n  "),t("span",{class:"token punctuation"},"}"),l("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),l("\n")])],-1),mt=t("p",null,"We can take a look at the code, you can see we used a writable computed. When accessing the value, we forward the value of props to it, and when writing, we emit out the update event automatically so you can use just like a normal ref.",-1),gt=t("pre",{class:"language-html"},[t("code",{class:"language-html"},[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),l("template")]),t("span",{class:"token punctuation"},">")]),l("\n  "),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),l("input")]),l(),t("span",{class:"token attr-name"},"v-model"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),l("value"),t("span",{class:"token punctuation"},'"')]),l(),t("span",{class:"token punctuation"},"/>")]),l("\n"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),l("template")]),t("span",{class:"token punctuation"},">")]),l("\n")])],-1),yt=t("p",null,[l("Even more, we can actually bind into our children elements’s "),t("code",null,"v-model"),l(" very easily.")],-1),wt=t("h2",{id:"vue-2-3",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#vue-2-3","aria-hidden":"true"},"#"),l(" Vue 2 & 3")],-1),bt=t("p",null,"That’s all the tips and patterns I have for today.",-1),vt=t("p",null,"As you might think those are for Vue 3 only, but actually they also applies for Vue 2!",-1),xt={id:"vue-composition-api-lib",tabindex:"-1"},It=t("a",{class:"header-anchor",href:"#vue-composition-api-lib","aria-hidden":"true"},"#",-1),Tt=l(),Vt=t("code",null,"@vue/composition-api",-1),St=l(),At=l("Lib"),Rt=t("p",null,"In case you didn’t know that, if you are still on Vue 2 but want to start using the Composition API, here we offered an official plugin that enables the Composition API for your Vue 2 app. Give it a try if you haven’t.",-1),Mt=l(),jt=t("a",{href:"https://github.com/vuejs/composition-api",target:"_blank",rel:"noopener"},"vuejs/composition-api",-1),Ct=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"import"),l(" Vue "),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'vue'"),l("\n"),t("span",{class:"token keyword"},"import"),l(" VueCompositionAPI "),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'@vue/composition-api'"),l("\n\nVue"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"use"),t("span",{class:"token punctuation"},"("),l("VueCompositionAPI"),t("span",{class:"token punctuation"},")"),l("\n")])],-1),Dt=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" ref"),t("span",{class:"token punctuation"},","),l(" reactive "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'@vue/composition-api'"),l("\n")])],-1),Wt={id:"vue-2-7-upcoming",tabindex:"-1"},Ut=t("a",{class:"header-anchor",href:"#vue-2-7-upcoming","aria-hidden":"true"},"#",-1),_t=l(" Vue 2.7 "),Pt=l("Upcoming"),zt=t("p",null,[l("We also announced "),t("a",{href:"https://github.com/vuejs/rfcs/blob/ie11/active-rfcs/0000-vue3-ie11-support.md#for-those-who-absolutely-need-ie11-support",target:"_blank",rel:"noopener"},"our plan for Vue 2.7"),l(" recently. Vue 2.7 will be the last minor version of Vue 2 with long time support for existing projects and those who still need IE 11 support. We will back-port Vue 3’s new features to Vue 2.7 and migrate the "),t("code",null,"@vue/compositon-api"),l(" plugin into it. Stay tuned on that.")],-1),Ht=t("ul",null,[t("li",null,[l("Backport "),t("code",null,"@vue/composition-api"),l(" into Vue 2’s core.")]),t("li",null,[t("code",null,"<script setup>"),l(" syntax in Single-File Components.")]),t("li",null,"Migrate codebase to TypeScript."),t("li",null,"IE11 support."),t("li",null,"LTS.")],-1),Lt={id:"vue-demi-lib",tabindex:"-1"},Et=t("a",{class:"header-anchor",href:"#vue-demi-lib","aria-hidden":"true"},"#",-1),Bt=l(" Vue Demi "),qt=l("Lib"),Ft=t("p",null,"If you are a library author want your libraries to support Vue 2 and 3 with the same codebase. You can try Vue Demi, which eases out the difference between Vue 2 and 3 and auto-detects users’ environment.",-1),Kt=l(),Yt=t("a",{href:"https://github.com/vueuse/vue-demi",target:"_blank",rel:"noopener"},"vueuse/vue-demi",-1),Ot=t("pre",{class:"language-ts"},[t("code",{class:"language-ts"},[t("span",{class:"token comment"},"// same syntax for both Vue 2 and 3"),l("\n"),t("span",{class:"token keyword"},"import"),l(),t("span",{class:"token punctuation"},"{"),l(" ref"),t("span",{class:"token punctuation"},","),l(" reactive"),t("span",{class:"token punctuation"},","),l(" defineComponent "),t("span",{class:"token punctuation"},"}"),l(),t("span",{class:"token keyword"},"from"),l(),t("span",{class:"token string"},"'vue-demi'"),l("\n")])],-1),Xt=t("h2",{id:"thank-you",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#thank-you","aria-hidden":"true"},"#"),l(" Thank you!")],-1),Gt=t("p",null,"That’s all for today.",-1),$t=t("p",null,"Due to the time limit, it’s a shame that I can not share all I have learned with you. As the Vue composition API is still fairly new, I believe there are more patterns and better practices for us to found.",-1),Nt=t("p",null,[l("To find more information, do check out the "),t("a",{href:"https://github.com/vueuse",target:"_blank",rel:"noopener"},"VueUse org on GitHub"),l(" and "),t("a",{href:"https://vueuse.org/add-ons.html",target:"_blank",rel:"noopener"},"its awesome ecosystem"),l(", and follow us on Twitter "),t("a",{href:"https://twitter.com/vueuse",target:"_blank",rel:"noopener"},"@vueuse"),l(" to keep up-to-date with news and tips.")],-1),Jt=t("p",null,"Thank you!",-1),Zt=t("p",{align:"center"},[t("a",{href:"https://github.com/sponsors/antfu#sponsors"},[t("img",{src:"https://cdn.jsdelivr.net/gh/antfu/static/sponsors.svg"})])],-1),Qt={setup(a,{expose:e}){const l={title:"Composable Vue - VueDay 2021",description:"Slides & transcript for my talk at VueDay 2021",date:"2021-04-28T16:00:00.000Z",lang:"en",type:"talk",duration:"30min",meta:[{property:"og:title",content:"Composable Vue - VueDay 2021"},{property:"og:description",content:"Slides & transcript for my talk at VueDay 2021"},{name:"description",content:"Slides & transcript for my talk at VueDay 2021"}]};e({frontmatter:l});return d({title:"Composable Vue - VueDay 2021",meta:[{property:"og:title",content:"Composable Vue - VueDay 2021"},{property:"og:description",content:"Slides & transcript for my talk at VueDay 2021"},{name:"description",content:"Slides & transcript for my talk at VueDay 2021"}]}),(a,e)=>{const p=n,u=w,r=x,i=D,k=z,d=H,f=b,g=E,y=m;return s(),o(y,{frontmatter:l},{default:c((()=>[t("div",q,[t("blockquote",null,[F,K,Y,t("p",null,[O,h(p,{class:"inline"}),X,G,$])]),N,J,Z,t("p",null,[h(u,{class:"inline-block"}),Q,nn]),sn,an,tn,t("h3",en,[on,cn,h(r)]),ln,pn,un,rn,kn,dn,hn,fn,t("h3",mn,[gn,yn,h(r)]),wn,bn,vn,xn,In,Tn,Vn,t("h3",Sn,[An,Rn,Mn,jn,h(r)]),Cn,Dn,Wn,Un,_n,Pn,zn,Hn,Ln,En,Bn,qn,h(i),Fn,Kn,h(k,{name:"useDark"}),Yn,On,Xn,Gn,$n,Nn,Jn,Zn,Qn,ns,ss,as,ts,es,os,cs,ls,ps,us,rs,is,ks,ds,hs,fs,t("h3",ms,[gs,ys,h(d)]),ws,bs,vs,xs,Is,Ts,t("h3",Vs,[Ss,As,Rs,Ms,h(f,{class:"text-blue-400"},{default:c((()=>[js])),_:1})]),Cs,Ds,Ws,Us,_s,h(k,{name:"useTitle"}),t("h3",Ps,[zs,Hs,h(r)]),Ls,Es,Bs,qs,Fs,Ks,Ys,Os,Xs,Gs,t("h3",$s,[Ns,Js,h(d)]),Zs,Qs,na,sa,aa,t("h3",ta,[ea,oa,h(g)]),ca,la,pa,ua,ra,t("h3",ia,[ka,da,ha,fa,h(f,{class:"text-blue-400"},{default:c((()=>[ma])),_:1})]),ga,ya,wa,h(k,{name:"useFetch"}),t("h3",ba,[va,xa,h(d)]),Ia,Ta,Va,Sa,h(k,{name:"useEventListener"}),t("h3",Aa,[Ra,Ma,ja,Ca,h(f,{class:"text-purple-400"},{default:c((()=>[Da])),_:1})]),Wa,Ua,_a,Pa,za,Ha,La,Ea,Ba,qa,Fa,t("h3",Ka,[Ya,Oa,h(d)]),Xa,Ga,$a,Na,Ja,Za,t("h3",Qa,[nt,st,h(d)]),at,tt,et,ot,ct,lt,pt,t("h3",ut,[rt,it,h(g)]),kt,dt,ht,ft,mt,gt,yt,h(k,{name:"useVModel"}),wt,bt,vt,t("h3",xt,[It,Tt,Vt,St,h(f,{class:"text-teal-400"},{default:c((()=>[At])),_:1})]),Rt,t("p",null,[h(u,{class:"inline-block"}),Mt,jt]),Ct,Dt,t("h3",Wt,[Ut,_t,h(f,{class:"text-purple-400"},{default:c((()=>[Pt])),_:1})]),zt,Ht,t("h3",Lt,[Et,Bt,h(f,{class:"text-teal-400"},{default:c((()=>[qt])),_:1})]),Ft,t("p",null,[h(u,{class:"inline-block"}),Kt,Yt]),Ot,Xt,Gt,$t,Nt,Jt,Zt])])),_:1})}}};export{Qt as default};
