import{_ as n}from"./Post.vue_vue&type=script&setup=true&lang.bcbdb260.js";import{j as s,o as a,n as t,h as o,a as e,i as p}from"./vendor.71f779ca.js";import"./app.ca842b37.js";const c=e("div",{class:"prose m-auto"},[e("p",null,[p("As you may or may not know, I am working on preparing to release the v1.0 version for "),e("a",{href:"https://github.com/vuejs/composition-api",target:"_blank",rel:"noopener"},"@vue/composition-api"),p(" recently. One of the current problems is that the type inference does not play well, "),e("a",{href:"https://github.com/vuejs/composition-api/issues/338",target:"_blank",rel:"noopener"},"#338"),p(". So I get a chance to have a deeper look at "),e("a",{href:"https://github.com/vuejs/composition-api",target:"_blank",rel:"noopener"},"vue-next"),p("’s type implementations. I will tell you what I learned and how the magic works in Vue.")]),e("p",null,[p("Forget about the "),e("code",null,"setup()"),p(" function and "),e("code",null,"Composition API"),p(" for now, let talk about the options API in Vue 2 that everybody familiar with. In a classical example, we would have "),e("code",null,"data"),p(", "),e("code",null,"computed"),p(", "),e("code",null,"methods"),p(" and some other fields like this:")]),e("pre",{class:"language-js"},[e("code",{class:"language-js"},[e("span",{class:"token keyword"},"export"),p(),e("span",{class:"token keyword"},"default"),p(),e("span",{class:"token punctuation"},"{"),p("\n  data"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token punctuation"},"{"),p("\n    first_name"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token string"},'"Anthony"'),e("span",{class:"token punctuation"},","),p("\n    last_name"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token string"},'"Fu"'),e("span",{class:"token punctuation"},","),p("\n  "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),p("\n  computed"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token punctuation"},"{"),p("\n    "),e("span",{class:"token function"},"full_name"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token punctuation"},"{"),p("\n      "),e("span",{class:"token keyword"},"return"),p(),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),p("first_name "),e("span",{class:"token operator"},"+"),p(),e("span",{class:"token string"},'" "'),p(),e("span",{class:"token operator"},"+"),p(),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),p("last_name"),e("span",{class:"token punctuation"},";"),p("\n    "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),p("\n  "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),p("\n  methods"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token punctuation"},"{"),p("\n    "),e("span",{class:"token function"},"hi"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token punctuation"},"{"),p("\n      "),e("span",{class:"token function"},"alert"),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),p("full_name"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),p("\n    "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),p("\n  "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),p("\n"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},";"),p("\n")])]),e("p",null,[p("It works well in Javascript and putting all the context into "),e("code",null,"this"),p(" is pretty straight forward and easy to understand. But when you switch to TypeScript for static type checking. "),e("code",null,"this"),p(" will not be the context you expected. How can we make the types work for Vue like the example above?")]),e("h2",{id:"type-for-this",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#type-for-this","aria-hidden":"true"},"#"),p(" Type for "),e("code",null,"this")]),e("p",null,[p("To explicitly assign type to "),e("code",null,"this"),p(", we can simpily use the "),e("code",null,"this parameter"),p(":")]),e("pre",{class:"language-ts"},[e("code",{class:"language-ts"},[e("span",{class:"token keyword"},"interface"),p(),e("span",{class:"token class-name"},"Context"),p(),e("span",{class:"token punctuation"},"{"),p("\n  $injected"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token builtin"},"string"),p("\n"),e("span",{class:"token punctuation"},"}"),p("\n\n"),e("span",{class:"token keyword"},"function"),p(),e("span",{class:"token function"},"bar"),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"this"),e("span",{class:"token operator"},":"),p(" Context"),e("span",{class:"token punctuation"},","),p(" a"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token builtin"},"number"),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token punctuation"},"{"),p("\n  "),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),p("$injected "),e("span",{class:"token comment"},"// ok"),p("\n"),e("span",{class:"token punctuation"},"}"),p("\n")])]),e("p",null,"The limitation of this approach is that we will lose the methods signature when working with a dict of methods:"),e("pre",{class:"language-ts"},[e("code",{class:"language-ts"},[e("span",{class:"token keyword"},"type"),p(),e("span",{class:"token class-name"},"Methods"),p(),e("span",{class:"token operator"},"="),p(" Record"),e("span",{class:"token operator"},"<"),e("span",{class:"token builtin"},"string"),e("span",{class:"token punctuation"},","),p(),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"this"),e("span",{class:"token operator"},":"),p(" Context"),e("span",{class:"token punctuation"},","),p(),e("span",{class:"token operator"},"..."),p("args"),e("span",{class:"token operator"},":"),e("span",{class:"token builtin"},"any"),e("span",{class:"token punctuation"},"["),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token operator"},"=>"),p(),e("span",{class:"token builtin"},"any"),e("span",{class:"token operator"},">"),p("\n\n"),e("span",{class:"token keyword"},"const"),p(" methods"),e("span",{class:"token operator"},":"),p(" Methods "),e("span",{class:"token operator"},"="),p(),e("span",{class:"token punctuation"},"{"),p("\n  "),e("span",{class:"token function"},"bar"),e("span",{class:"token punctuation"},"("),p("a"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token builtin"},"number"),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token punctuation"},"{"),p("\n    "),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),p("$injected "),e("span",{class:"token comment"},"// ok"),p("\n  "),e("span",{class:"token punctuation"},"}"),p("\n"),e("span",{class:"token punctuation"},"}"),p("\n\nmethods"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"bar"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'foo'"),e("span",{class:"token punctuation"},","),p(),e("span",{class:"token string"},"'bar'"),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token comment"},"// no error, the type of arguments becomes `any[]`"),p("\n")])]),e("p",null,[p("We would not want to ask users to explicitly type "),e("code",null,"this"),p(" in every methods in order to make the type checking works. So we will need another approach.")]),e("h3",{id:"thistype-t",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#thistype-t","aria-hidden":"true"},"#"),p(),e("a",{href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#thistypet",target:"_blank",rel:"noopener"},[e("code",null,"ThisType<T>")])]),e("p",null,[p("After digging into the Vue’s code, I found an interesting TypeScirpt utility "),e("code",null,"ThisType<T>"),p(". The official doc says:")]),e("blockquote",null,[e("p",null,[p("This utility does not return a transformed type. Instead, it serves as a marker for a contextual "),e("code",null,"this"),p(" type.")])]),e("p",null,[e("code",null,"ThisType"),p(" would affect all the nested functions. With it, we can have:")]),e("pre",{class:"language-ts"},[e("code",{class:"language-ts"},[e("span",{class:"token keyword"},"type"),p(),e("span",{class:"token class-name"},"Methods"),p(),e("span",{class:"token operator"},"="),p(),e("span",{class:"token punctuation"},"{"),p("\n  "),e("span",{class:"token function-variable function"},"double"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token punctuation"},"("),p("a"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token builtin"},"number"),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token operator"},"=>"),p(),e("span",{class:"token builtin"},"number"),p("\n  deep"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token punctuation"},"{"),p("\n    nested"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token punctuation"},"{"),p("\n      "),e("span",{class:"token function-variable function"},"half"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token punctuation"},"("),p("a"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token builtin"},"number"),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token operator"},"=>"),p(),e("span",{class:"token builtin"},"number"),p("\n    "),e("span",{class:"token punctuation"},"}"),p("\n  "),e("span",{class:"token punctuation"},"}"),p("\n"),e("span",{class:"token punctuation"},"}"),p("\n\n"),e("span",{class:"token keyword"},"const"),p(" methods"),e("span",{class:"token operator"},":"),p(" Methods "),e("span",{class:"token operator"},"&"),p(" ThisType"),e("span",{class:"token operator"},"<"),p("Methods "),e("span",{class:"token operator"},"&"),p(" Context"),e("span",{class:"token operator"},">"),p(),e("span",{class:"token operator"},"="),p(),e("span",{class:"token punctuation"},"{"),p("\n  "),e("span",{class:"token function"},"double"),e("span",{class:"token punctuation"},"("),p("a"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token builtin"},"number"),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token punctuation"},"{"),p("\n    "),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),p("$injected "),e("span",{class:"token comment"},"// ok"),p("\n    "),e("span",{class:"token keyword"},"return"),p(" a "),e("span",{class:"token operator"},"*"),p(),e("span",{class:"token number"},"2"),p("\n  "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),p("\n  deep"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token punctuation"},"{"),p("\n    nested"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token punctuation"},"{"),p("\n      "),e("span",{class:"token function"},"half"),e("span",{class:"token punctuation"},"("),p("a"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token builtin"},"number"),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token punctuation"},"{"),p("\n        "),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),p("$injected "),e("span",{class:"token comment"},"// ok"),p("\n        "),e("span",{class:"token keyword"},"return"),p(" a "),e("span",{class:"token operator"},"/"),p(),e("span",{class:"token number"},"2"),p("\n      "),e("span",{class:"token punctuation"},"}"),p("\n    "),e("span",{class:"token punctuation"},"}"),p("\n  "),e("span",{class:"token punctuation"},"}"),p("\n"),e("span",{class:"token punctuation"},"}"),p("\n\nmethods"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"double"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"2"),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token comment"},"// ok"),p("\nmethods"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"double"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'foo'"),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token comment"},"// error"),p("\nmethods"),e("span",{class:"token punctuation"},"."),p("deep"),e("span",{class:"token punctuation"},"."),p("nested"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"half"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"4"),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token comment"},"// ok"),p("\n")])]),e("p",null,"The typing works well, but it still requires users to define the type interface of Methods first. Can we make it infers itself automatically?"),e("p",null,"We can do that with function inference:"),e("pre",{class:"language-ts"},[e("code",{class:"language-ts"},[e("span",{class:"token keyword"},"type"),p(),e("span",{class:"token class-name"},[p("Options"),e("span",{class:"token operator"},"<"),e("span",{class:"token constant"},"T"),e("span",{class:"token operator"},">")]),p(),e("span",{class:"token operator"},"="),p(),e("span",{class:"token punctuation"},"{"),p("\n  methods"),e("span",{class:"token operator"},"?"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token constant"},"T"),p(" \n"),e("span",{class:"token punctuation"},"}"),p(),e("span",{class:"token operator"},"&"),p(" ThisType"),e("span",{class:"token operator"},"<"),e("span",{class:"token constant"},"T"),p(),e("span",{class:"token operator"},"&"),p(" Context"),e("span",{class:"token operator"},">"),p("\n\n"),e("span",{class:"token keyword"},"function"),p(),e("span",{class:"token generic-function"},[e("span",{class:"token function"},"define"),e("span",{class:"token generic class-name"},[e("span",{class:"token operator"},"<"),e("span",{class:"token constant"},"T"),e("span",{class:"token operator"},">")])]),e("span",{class:"token punctuation"},"("),p("options"),e("span",{class:"token operator"},":"),p(" Options"),e("span",{class:"token operator"},"<"),e("span",{class:"token constant"},"T"),e("span",{class:"token operator"},">"),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token punctuation"},"{"),p("\n  "),e("span",{class:"token keyword"},"return"),p(" options\n"),e("span",{class:"token punctuation"},"}"),p("\n\n"),e("span",{class:"token function"},"define"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"{"),p("\n  methods"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token punctuation"},"{"),p("\n    "),e("span",{class:"token function"},"foo"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token punctuation"},"{"),p("\n      "),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),p("$injected "),e("span",{class:"token comment"},"// ok"),p("\n    "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),p("\n  "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),p("\n"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},")"),p("\n")])]),e("blockquote",null,[e("p",null,"The inference graph would be like"),e("p",null,"TODO: draw a graph")]),e("p",null,[p("Cool. There is only one step left, to make context object dynamic inference from "),e("code",null,"data"),p(" and "),e("code",null,"computed"),p(".")]),e("p",null,"The full working demo would be:"),e("pre",{class:"language-ts"},[e("code",{class:"language-ts"},[e("span",{class:"token comment"},"/* ---- Type ---- */"),p("\n"),e("span",{class:"token keyword"},"export"),p(),e("span",{class:"token keyword"},"type"),p(),e("span",{class:"token class-name"},[p("ExtractComputedReturns"),e("span",{class:"token operator"},"<"),e("span",{class:"token constant"},"T"),p(),e("span",{class:"token keyword"},"extends"),p(),e("span",{class:"token builtin"},"any"),e("span",{class:"token operator"},">")]),p(),e("span",{class:"token operator"},"="),p(),e("span",{class:"token punctuation"},"{"),p("\n  "),e("span",{class:"token punctuation"},"["),p("key "),e("span",{class:"token keyword"},"in"),p(),e("span",{class:"token keyword"},"keyof"),p(),e("span",{class:"token constant"},"T"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token constant"},"T"),e("span",{class:"token punctuation"},"["),p("key"),e("span",{class:"token punctuation"},"]"),p(),e("span",{class:"token keyword"},"extends"),p(),e("span",{class:"token punctuation"},"("),e("span",{class:"token operator"},"..."),p("args"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token builtin"},"any"),e("span",{class:"token punctuation"},"["),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token operator"},"=>"),p(),e("span",{class:"token keyword"},"infer"),p(" TReturn\n    "),e("span",{class:"token operator"},"?"),p(" TReturn\n    "),e("span",{class:"token operator"},":"),p(),e("span",{class:"token builtin"},"never"),p("\n"),e("span",{class:"token punctuation"},"}"),p("\n\n"),e("span",{class:"token keyword"},"type"),p(),e("span",{class:"token class-name"},[p("Options"),e("span",{class:"token operator"},"<"),e("span",{class:"token constant"},"D"),p(),e("span",{class:"token operator"},"="),p(),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),p(),e("span",{class:"token constant"},"C"),p(),e("span",{class:"token operator"},"="),p(),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),p(),e("span",{class:"token constant"},"M"),p(),e("span",{class:"token operator"},"="),p(),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token operator"},">")]),p(),e("span",{class:"token operator"},"="),p(),e("span",{class:"token punctuation"},"{"),p("\n  "),e("span",{class:"token function-variable function"},"data"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token operator"},"=>"),p(),e("span",{class:"token constant"},"D"),p("\n  computed"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token constant"},"C"),p("\n  methods"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token constant"},"M"),p("\n  "),e("span",{class:"token function-variable function"},"mounted"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token operator"},"=>"),p(),e("span",{class:"token keyword"},"void"),p("\n  "),e("span",{class:"token comment"},"// and other options"),p("\n"),e("span",{class:"token punctuation"},"}"),p(" \n"),e("span",{class:"token operator"},"&"),p(" ThisType"),e("span",{class:"token operator"},"<"),e("span",{class:"token constant"},"D"),p(),e("span",{class:"token operator"},"&"),p(),e("span",{class:"token constant"},"M"),p(),e("span",{class:"token operator"},"&"),p(" ExtractComputedReturns"),e("span",{class:"token operator"},"<"),e("span",{class:"token constant"},"C"),e("span",{class:"token operator"},">>"),p(),e("span",{class:"token comment"},"// merge them together"),p("\n\n"),e("span",{class:"token keyword"},"function"),p(),e("span",{class:"token generic-function"},[e("span",{class:"token function"},"define"),e("span",{class:"token generic class-name"},[e("span",{class:"token operator"},"<"),e("span",{class:"token constant"},"D"),e("span",{class:"token punctuation"},","),p(),e("span",{class:"token constant"},"C"),e("span",{class:"token punctuation"},","),p(),e("span",{class:"token constant"},"M"),e("span",{class:"token operator"},">")])]),e("span",{class:"token punctuation"},"("),p("options"),e("span",{class:"token operator"},":"),p(" Options"),e("span",{class:"token operator"},"<"),e("span",{class:"token constant"},"D"),e("span",{class:"token punctuation"},","),p(),e("span",{class:"token constant"},"C"),e("span",{class:"token punctuation"},","),p(),e("span",{class:"token constant"},"M"),e("span",{class:"token operator"},">"),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"}"),p("\n\n"),e("span",{class:"token comment"},"/* ---- Usage ---- */"),p("\n"),e("span",{class:"token function"},"define"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"{"),p("\n  "),e("span",{class:"token function"},"data"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token punctuation"},"{"),p("\n    "),e("span",{class:"token keyword"},"return"),p(),e("span",{class:"token punctuation"},"{"),p("\n      first_name"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token string"},'"Anthony"'),e("span",{class:"token punctuation"},","),p("\n      last_name"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token string"},'"Fu"'),e("span",{class:"token punctuation"},","),p("\n    "),e("span",{class:"token punctuation"},"}"),p("\n  "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),p("\n  computed"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token punctuation"},"{"),p("\n    "),e("span",{class:"token function"},"fullname"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token punctuation"},"{"),p("\n      "),e("span",{class:"token keyword"},"return"),p(),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),p("first_name "),e("span",{class:"token operator"},"+"),p(),e("span",{class:"token string"},'" "'),p(),e("span",{class:"token operator"},"+"),p(),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),p("last_name\n    "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),p("\n  "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),p("\n  methods"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token punctuation"},"{"),p("\n    "),e("span",{class:"token function"},"notify"),e("span",{class:"token punctuation"},"("),p("msg"),e("span",{class:"token operator"},":"),p(),e("span",{class:"token builtin"},"string"),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token punctuation"},"{"),p("\n      "),e("span",{class:"token function"},"alert"),e("span",{class:"token punctuation"},"("),p("msg"),e("span",{class:"token punctuation"},")"),p("\n    "),e("span",{class:"token punctuation"},"}"),p("\n  "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),p("\n  "),e("span",{class:"token function"},"mounted"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),p(),e("span",{class:"token punctuation"},"{"),p("\n    "),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"notify"),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),p("fullname"),e("span",{class:"token punctuation"},")"),p("\n  "),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),p("\n"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},")"),p("\n")])])],-1),l={setup(e,{expose:p}){const l={draft:!1,title:"Type Inferencing in Vue",date:"2020-06-28T00:00:00.000Z",hero_image:"",lang:"en",meta:[{property:"og:title",content:"Type Inferencing in Vue"}]};p({frontmatter:l});return s({title:"Type Inferencing in Vue",meta:[{property:"og:title",content:"Type Inferencing in Vue"}]}),(s,e)=>{const p=n;return a(),t(p,{frontmatter:l},{default:o((()=>[c])),_:1})}}};export{l as default};
