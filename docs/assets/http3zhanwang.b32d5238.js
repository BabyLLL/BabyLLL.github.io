import{_ as t}from"./Blog.vue_vue&type=script&setup=true&lang.39d150f4.js";import{l as e,o as a,m as l,h as T,a as r,k as n}from"./vendor.14139df1.js";import"./app.108283c1.js";const i=r("div",{class:"prose m-auto"},[r("h2",{id:"归纳",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#归纳","aria-hidden":"true"},"#"),n(" 归纳")]),r("ol",null,[r("li",null,"HTTP/3 基于 QUIC 协议，完全解决了“队头阻塞”问题，弱网环境下的表现会优于 HTTP/2；"),r("li",null,"QUIC 是一个新的传输层协议，建立在 UDP 之上，实现了可靠传输；"),r("li",null,"QUIC 内含了 TLS1.3，只能加密通信，支持 0-RTT 快速建连；"),r("li",null,"QUIC 的连接使用“不透明”的连接 ID，不绑定在“IP 地址 + 端口”上，支持“连接迁移”；"),r("li",null,"QUIC 的流与 HTTP/2 的流很相似，但分为双向流和单向流；"),r("li",null,"HTTP/3 没有指定默认端口号，需要用 HTTP/2 的扩展帧“Alt-Svc”来发现。")]),r("h2",{id:"http-2的队头阻塞",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#http-2的队头阻塞","aria-hidden":"true"},"#"),n(" HTTP/2的队头阻塞")]),r("p",null,"因为tcp中有丢包重传机制。"),r("p",null,"在http3中引入了新的协议HTTP over QUIC"),r("p",null,[r("img",{src:"https://static001.geekbang.org/resource/image/d2/03/d263202e431c84db0fd6c7e6b1980f03.png",alt:""})]),r("h2",{id:"quic-协议",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#quic-协议","aria-hidden":"true"},"#"),n(" QUIC 协议")]),r("p",null,"QUIC 最早是由 Google 发明的，被称为 gQUIC。而当前正在由 IETF 标准化的 QUIC 被称为 iQUIC。两者的差异非常大，甚至比当年的 SPDY 与 HTTP/2 的差异还要大。"),r("p",null,"gQUIC 混合了 UDP、TLS、HTTP，是一个应用层的协议。而 IETF 则对 gQUIC 做了“清理”，把应用部分分离出来，形成了 HTTP/3，原来的 UDP 部分“下放”到了传输层，所以 iQUIC 有时候也叫“QUIC-transport”。"),r("h2",{id:"quic-的特点",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#quic-的特点","aria-hidden":"true"},"#"),n(" QUIC 的特点")]),r("p",null,"QUIC 基于 UDP，而 UDP 是“无连接”的，根本就不需要“握手”和“挥手”，所以天生就要比 TCP 快。"),r("p",null,"就像 TCP 在 IP 的基础上实现了可靠传输一样，QUIC 也基于 UDP 实现了可靠传输，保证数据一定能够抵达目的地。它还引入了类似 HTTP/2 的“流”和“多路复用”，单个“流”是有序的，可能会因为丢包而阻塞，但其他“流”不会受到影响。"),r("p",null,"为了防止网络上的中间设备（Middle Box）识别协议的细节，QUIC 全面采用加密通信，可以很好地抵御窜改和“协议僵化”（ossification）。"),r("p",null,"而且，因为 TLS1.3 已经在去年（2018）正式发布，所以 QUIC 就直接应用了 TLS1.3，顺便也就获得了 0-RTT、1-RTT 连接的好处。"),r("p",null,"但 QUIC 并不是建立在 TLS 之上，而是内部“包含”了 TLS。它使用自己的帧“接管”了 TLS 里的“记录”，握手消息、警报消息都不使用 TLS 记录，直接封装成 QUIC 的帧发送，省掉了一次开销。"),r("h2",{id:"quic-的内部细节",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#quic-的内部细节","aria-hidden":"true"},"#"),n(" QUIC 的内部细节")]),r("p",null,"QUIC 的基本数据传输单位是包（packet）和帧（frame），一个包由多个帧组成，包面向的是“连接”，帧面向的是“流”。"),r("p",null,"QUIC 使用不透明的“连接 ID”来标记通信的两个端点，客户端和服务器可以自行选择一组 ID 来标记自己，这样就解除了 TCP 里连接对“IP 地址 + 端口”（即常说的四元组）的强绑定，支持“连接迁移”（Connection Migration）。"),r("h2",{id:"http-3-服务发现",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#http-3-服务发现","aria-hidden":"true"},"#"),n(" HTTP/3 服务发现")]),r("p",null,"这就要用到 HTTP/2 里的“扩展帧”了。浏览器需要先用 HTTP/2 协议连接服务器，然后服务器可以在启动 HTTP/2 连接后发送一个“Alt-Svc”帧，包含一个“h3=host:port”的字符串，告诉浏览器在另一个端点上提供等价的 HTTP/3 服务。"),r("p",null,"浏览器收到“Alt-Svc”帧，会使用 QUIC 异步连接指定的端口，如果连接成功，就会断开 HTTP/2 连接，改用新的 HTTP/3 收发数据。")],-1),o={setup(r,{expose:n}){const o={title:"32 | 未来之路：HTTP/3展望",date:"2021-11-15T16:00:00.000Z",duration:"10min",meta:[{property:"og:title",content:"32 | 未来之路：HTTP/3展望"}]};n({frontmatter:o});return e({title:"32 | 未来之路：HTTP/3展望",meta:[{property:"og:title",content:"32 | 未来之路：HTTP/3展望"}]}),(e,r)=>{const n=t;return a(),l(n,{frontmatter:o},{default:T((()=>[i])),_:1})}}};export{o as default};
